install:
  postgresql: true
  vault: false

participant:
  id: "BPNL000000000CX4"

iatp:
  # Decentralized Identifier
  id: "did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL000000000CX4"
  trustedIssuers:
    - "did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL00000003CRHK"
  sts:
    dim:
      url: "https://dis-integration-service-prod.eu10.dim.cloud.sap/api/v2.0.0/iatp/catena-x-portal"
    oauth:
      token_url: "https://bpnl000000000cx4-bpdm--provider.authentication.eu10.hana.ondemand.com/oauth/token"
      client:
        id: "sb-ad1f7564-2b95-4dac-9bd9-af6f60fbd1f9!b496970|ica-production-dim-prod-eu10-004-prod-dis-cloud-approuter!b174292"
        secret_alias: "int/bpdm/edc/client-secret"

controlplane:
  env:
    EDC_IAM_TRUSTED-ISSUER_ISSUER1_ID: "did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL00000003CRHK"
  endpoints:
    # -- data management api, used by internal users, can be added to an ingress and must not be internet facing
    management:
      # -- authentication key, must be attached to each 'X-Api-Key' request header
      authKey: <path:bpdm/data/int/bpdm/edc/api#management-key>
  bdrs:
    server:
      url: "https://bpn-did-resolution-service.int.catena-x.net/api/directory"
  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "bpdm-edc.int.catena-x.net"
      className: "nginx"
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - management
        - control
        - protocol
      # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
      tls:
        # -- Enables TLS on the ingress resource
        enabled: true
        # -- If present overwrites the default secret name
        secretName: tls-secret-bpdm-edc-controlplane

dataplane:
  env:
    EDC_IAM_TRUSTED-ISSUER_ISSUER1_ID: "did:web:portal-backend.int.catena-x.net:api:administration:staticdata:did:BPNL00000003CRHK"
  endpoints:
    proxy:
      authKey: <path:bpdm/data/int/bpdm/edc/api#proxy-key>
  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "bpdm-edc.int.catena-x.net"
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - public
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: "nginx"
      # -- TLS [tls class](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls) applied to the ingress resource
      tls:
        # -- Enables TLS on the ingress resource
        enabled: true
        # -- If present overwrites the default secret name
        secretName: tls-secret-bpdm-edc-dataplane
  token:
    signer:
      privatekey_alias: "int/bpdm/edc/token-private-key"
    verifier:
      publickey_alias: "int/bpdm/edc/token-public-key"

postgresql:
  jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/edc"
  primary:
    persistence:
      enabled: true
  auth:
    database: "edc"
    username: "user"
    password: <path:bpdm/data/int/bpdm/edc/postgres#password>

vault:
  hashicorp:
    url: "https://vault.core.catena-x.net"
    token: <path:bpdm/data/int/bpdm/edc/vault#token>
    paths:
      secret: /v1/bpdm